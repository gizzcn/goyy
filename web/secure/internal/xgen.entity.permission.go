// generated by xgen -- DO NOT EDIT
package internal

import (
	"bytes"
	"fmt"
	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	PERMISSION            = schema.TABLE("sys_menu")
	PERMISSION_ID         = PERMISSION.PRIMARY("id")
	PERMISSION_PERMISSION = PERMISSION.COLUMN("permission")
)

func NewPermission() *Permission {
	e := &Permission{}
	e.init()
	return e
}

func (me *Permission) Id() string {
	return me.id.Value()
}

func (me *Permission) SetId(v string) {
	me.id.SetValue(v)
}

func (me *Permission) Permission() string {
	return me.permission.Value()
}

func (me *Permission) SetPermission(v string) {
	me.permission.SetValue(v)
}

func (me *Permission) init() {
	me.table = PERMISSION
	me.id.SetColumn(PERMISSION_ID)
	me.permission.SetColumn(PERMISSION_PERMISSION)
	me.id.SetField(entity.DefaultField())
	me.permission.SetField(entity.DefaultField())
}

func (me Permission) New() entity.Interface {
	return NewPermission()
}

func (me *Permission) Get(column string) interface{} {
	switch column {
	case PERMISSION_ID.Name():
		return me.id.Value()
	case PERMISSION_PERMISSION.Name():
		return me.permission.Value()
	}
	return nil
}

func (me *Permission) GetPtr(column string) interface{} {
	switch column {
	case PERMISSION_ID.Name():
		return me.id.ValuePtr()
	case PERMISSION_PERMISSION.Name():
		return me.permission.ValuePtr()
	}
	return nil
}

func (me *Permission) Table() schema.Table {
	return me.table
}

func (me *Permission) Type(column string) (entity.Type, bool) {
	switch column {
	case PERMISSION_ID.Name():
		return &me.id, true
	case PERMISSION_PERMISSION.Name():
		return &me.permission, true
	}
	return nil, false
}

func (me *Permission) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "id":
		return PERMISSION_ID, true
	case "permission":
		return PERMISSION_PERMISSION, true
	}
	return nil, false
}

func (me *Permission) Columns() []schema.Column {
	return []schema.Column{
		PERMISSION_ID,
		PERMISSION_PERMISSION,
	}
}

func (me *Permission) Names() []string {
	return []string{
		"id",
		"permission",
	}
}

func (me *Permission) Value() *Permission {
	return me
}

func (me *Permission) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "id":
		return me.id.SetString(value)
	case "permission":
		return me.permission.SetString(value)
	}
	return nil
}

func (me *Permission) Validate() error {
	return nil
}

func (me *Permission) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(fmt.Sprintf(`,"id":%q`, me.id.String()))
	b.WriteString(fmt.Sprintf(`,"permission":%q`, me.permission.String()))
	b.WriteString("}")
	return b.String()
}

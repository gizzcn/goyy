// generated by xgen -- DO NOT EDIT
package post

import (
	"bytes"
	"fmt"
	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	MENU_ENTITY           = schema.TABLE("")
	MENU_ENTITY_ID        = MENU_ENTITY.PRIMARY("id")
	MENU_ENTITY_MEMO      = MENU_ENTITY.COLUMN("memo")
	MENU_ENTITY_CREATES   = MENU_ENTITY.COLUMN("creates")
	MENU_ENTITY_CREATER   = MENU_ENTITY.CREATER("creater")
	MENU_ENTITY_CREATED   = MENU_ENTITY.CREATED("created")
	MENU_ENTITY_MODIFIER  = MENU_ENTITY.MODIFIER("modifier")
	MENU_ENTITY_MODIFIED  = MENU_ENTITY.MODIFIED("modified")
	MENU_ENTITY_VERSION   = MENU_ENTITY.VERSION("version")
	MENU_ENTITY_DELETION  = MENU_ENTITY.DELETION("deletion")
	MENU_ENTITY_ARTIFICAL = MENU_ENTITY.COLUMN("artifical")
	MENU_ENTITY_HISTORY   = MENU_ENTITY.COLUMN("history")
)

func NewMenuEntity() *MenuEntity {
	e := &MenuEntity{}
	e.init()
	return e
}

func (me *MenuEntity) init() {
	me.table = MENU_ENTITY

	if t, ok := me.Sys.Type("id"); ok {
		t.SetColumn(MENU_ENTITY_ID)
	}
	if t, ok := me.Sys.Type("memo"); ok {
		t.SetColumn(MENU_ENTITY_MEMO)
	}
	if t, ok := me.Sys.Type("creates"); ok {
		t.SetColumn(MENU_ENTITY_CREATES)
	}
	if t, ok := me.Sys.Type("creater"); ok {
		t.SetColumn(MENU_ENTITY_CREATER)
	}
	if t, ok := me.Sys.Type("created"); ok {
		t.SetColumn(MENU_ENTITY_CREATED)
	}
	if t, ok := me.Sys.Type("modifier"); ok {
		t.SetColumn(MENU_ENTITY_MODIFIER)
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetColumn(MENU_ENTITY_MODIFIED)
	}
	if t, ok := me.Sys.Type("version"); ok {
		t.SetColumn(MENU_ENTITY_VERSION)
	}
	if t, ok := me.Sys.Type("deletion"); ok {
		t.SetColumn(MENU_ENTITY_DELETION)
	}
	if t, ok := me.Sys.Type("artifical"); ok {
		t.SetColumn(MENU_ENTITY_ARTIFICAL)
	}
	if t, ok := me.Sys.Type("history"); ok {
		t.SetColumn(MENU_ENTITY_HISTORY)
	}

	if t, ok := me.Sys.Type("created"); ok {
		t.SetDefault("-62135596800")
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetDefault("-62135596800")
	}

	columns := []string{"id", "memo", "creates", "creater", "created", "modifier", "modified",
		"version", "deletion", "artifical", "history"}
	for _, c := range columns {
		if t, ok := me.Sys.Type(c); ok {
			t.SetField(entity.DefaultField())
		}
	}
}

func (me MenuEntity) New() entity.Interface {
	return NewMenuEntity()
}

func (me *MenuEntity) Get(column string) interface{} {
	switch column {
	}
	return me.Sys.Get(column)
}

func (me *MenuEntity) GetPtr(column string) interface{} {
	switch column {
	}
	return me.Sys.GetPtr(column)
}

func (me *MenuEntity) Table() schema.Table {
	return me.table
}

func (me *MenuEntity) Type(column string) (entity.Type, bool) {
	switch column {
	}
	return me.Sys.Type(column)
}

func (me *MenuEntity) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	}
	return me.Sys.Column(field)
}

func (me *MenuEntity) Columns() []schema.Column {
	return []schema.Column{
		MENU_ENTITY_ID,
		MENU_ENTITY_MEMO,
		MENU_ENTITY_CREATES,
		MENU_ENTITY_CREATER,
		MENU_ENTITY_CREATED,
		MENU_ENTITY_MODIFIER,
		MENU_ENTITY_MODIFIED,
		MENU_ENTITY_VERSION,
		MENU_ENTITY_DELETION,
		MENU_ENTITY_ARTIFICAL,
		MENU_ENTITY_HISTORY,
	}
}

func (me *MenuEntity) Names() []string {
	return []string{
		"id",
		"memo",
		"creates",
		"creater",
		"created",
		"modifier",
		"modified",
		"version",
		"deletion",
		"artifical",
		"history",
	}
}

func (me *MenuEntity) Value() *MenuEntity {
	return me
}

func (me *MenuEntity) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	}
	return me.Sys.SetString(field, value)
}

func (me *MenuEntity) Validate() error {
	return nil
}

func (me *MenuEntity) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(fmt.Sprintf(`"id":%q`, me.Sys.Pk.Id()))
	b.WriteString(fmt.Sprintf(`,"memo":%q`, me.Sys.Memo()))
	b.WriteString(fmt.Sprintf(`,"creates":%q`, me.Sys.Creates()))
	b.WriteString(fmt.Sprintf(`,"creater":%q`, me.Sys.Creater()))
	b.WriteString(fmt.Sprintf(`,"created":%d`, me.Sys.Created()))
	b.WriteString(fmt.Sprintf(`,"modifier":%q`, me.Sys.Modifier()))
	b.WriteString(fmt.Sprintf(`,"modified":%d`, me.Sys.Modified()))
	b.WriteString(fmt.Sprintf(`,"version":%d`, me.Sys.Version()))
	b.WriteString(fmt.Sprintf(`,"deletion":%d`, me.Sys.Deletion()))
	b.WriteString(fmt.Sprintf(`,"artifical":%d`, me.Sys.Artifical()))
	b.WriteString(fmt.Sprintf(`,"history":%d`, me.Sys.History()))
	b.WriteString("}")
	return b.String()
}
